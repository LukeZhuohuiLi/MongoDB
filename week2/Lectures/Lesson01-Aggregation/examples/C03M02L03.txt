
________________________________________________________
#(Slide 4)
# $sum
db[:zips].find.aggregate([{ :$group=>{:_id=>'$state', :population=>{:$sum=>'$pop'}}},:$limit=>5]).each {|r| pp r}
{"_id" => "WA", "population" => 4866692}
{"_id" => "HI", "population" => 1108229}  sum
________________________________________________________
#(Slide 5)
# $avg
db[:zips].find.aggregate([{ :$group=>{ :_id=>'$state', :ave_population=>{:$avg=>'$pop'}}},{:$limit=>5}]).each {|r| pp r}

________________________________________________________
#(Slide 6)
# $max
db[:zips].find().aggregate([{:$group=>{ :_id=>'$state', :max_zip=>{:$max=>'$pop'}}}, {:$limit=>5}]).each {|r| pp r}
which zip code has the maximum population for a given state
{"_id" => "WA", "max_zip" => 50515}
________________________________________________________
#(Slide 7)
# $min
db[:zips].find().aggregate([{:$group=>{ :_id=>'$state', :min_zip=>{:$min=>'$pop'}}}, {:$limit=>5}]).each {|r| pp r}
________________________________________________________
#(Slide 7)
# $push
Return an array of all values that result from applying an expression to each document in a group of documents that share the same group by key.
db[:zips].find().aggregate(
  [{:$group=>{ :_id=>{:city=>'$city',  
  :state=>'$state'},
  :zips=>{:$push=>'$_id'}}},    
  {:$limit=>15}]).each {|r| pp r}
one city has two zip codes
  ________________________________________________________
#(Slide 8)
Returns an array of all unique values that result from
applying an expression to each document in a group of
documents that share the same group by key. Order of
the elements in the output array is unspecified.
# $addToSet
//every single state 
db[:zips].find.aggregate([ {:$group=>{:_id=>0, :zips=>{:$push=>"$state"}}}]).first  

db[:zips].find.aggregate([ {:$group=>{:_id=>0, :zips=>{:$addToSet=>"$state"}}}]).first